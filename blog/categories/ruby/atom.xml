<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | José Galisteo Ruiz]]></title>
  <link href="http://ceritium.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ceritium.github.io/"/>
  <updated>2016-08-06T12:44:41+02:00</updated>
  <id>http://ceritium.github.io/</id>
  <author>
    <name><![CDATA[Jose Galisteo Ruiz]]></name>
    <email><![CDATA[ceritium@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[activerecord-preload_query]]></title>
    <link href="http://ceritium.github.io/blog/2016/08/04/activerecord-preload-query/"/>
    <updated>2016-08-04T22:55:41+02:00</updated>
    <id>http://ceritium.github.io/blog/2016/08/04/activerecord-preload-query</id>
    <content type="html"><![CDATA[<p>Este post va sobre mi gema
<a href="https://github.com/ceritium/activerecord-preload_query">activerecord-preload_query</a>
y otras maneras de hacer lo mismo.</p>

<p>Activerecord nos provee los métodos <code>preload</code>, <code>eager_load</code> e <code>includes</code> para precargar
relaciones y evitar hacer N+1 queries a la base de datos cuando queremos acceder
a esta. También nos provee de <code>counter_cache</code>, el cual está muy bien, pero está
muy imitado.</p>

<p>Pero que pasa si tenemos algunos cálculos mas complicados? Imaginemos que
tenemos el siguiente código:</p>

<pre><code class="ruby">
class Category &lt; ActiveRecord::Base

  has_many :products

end

class Product &lt; ActiveRecord::Base

  belongs_to :category, counter_cache: true

end
</code></pre>

<p>Gracias a <code>counter_cache</code> podemos hacer algo así:</p>

<pre><code class="ruby">Category.all.each do |category|
  p category.products_count
end
</code></pre>

<p>Y solo se hará una sola llamada.</p>

<p>Pero y si queremos saber por alguna razón el stock total de cada categoría?
Imaginemos que <code>Product</code> tiene el atributo <code>stock</code>.</p>

<p>En la categoría podremos añadir un método <code>products_stock</code> como este:</p>

<pre><code class="ruby">
def products_stock
  products.sum(:stock)
end
</code></pre>

<p>De esta manera, tendremos de nuevo el problema del N+1.</p>

<h2>Solución con joins</h2>

<p>Para evitarlo podríamos optar por algo como:</p>

<pre><code class="ruby">  @categories = Category.select('*, sum(products.stock) as products_stock').joins(:products)
</code></pre>

<p>Esto soluciona el problema del N+1, pero estamos sobrescribiendo el <code>select</code>,
entonces a <code>@categories</code> no podremos enviarle muchos métodos de activerecord
porque no estarán disponibles los campos que el espera.</p>

<p>Un ejemplo sencillo es con <code>@categories.count</code>
y si en vez de ser <code>Category</code> lo que precede a <code>select</code> fuese un &ldquo;scope&rdquo; mucho más
complicado como podría ser en el caso del <code>scope</code> producido por una búsqueda
compleja seguramente acabaríamos rompiendo la <code>query</code>.</p>

<p>Además que incluso con este sencillo caso, <code>@categories.count</code> acaba dando un
error al no estar presentes los campos que se esperaban, porque hemos sobreescrito el
<code>select</code>.</p>

<p>Otro problema a tener en cuenta, pero no el principal es hacer <code>joins</code> de tablas
muy grandes.</p>

<h2>Consulta a parte</h2>

<p>Para evitar los problemas de sobreescribir el <code>select</code>, lo mejor es hacer la consulta
a parte, por ejemplo:</p>

<pre><code class="ruby">categories = Category.limit(10).includes(:foo, :bar).where('whatever = foo')

products_stock = Category.where(id: categories.map(&amp;:id)).select('*, sum(products.stock) as products_stock').joins(:products).map{|x| [x.id, x.products_stock]}.to_h

categories.map do |category|
  category.define_singleton_method :products_stock, lambda { products_stock[category.id] }
end
</code></pre>

<h2>Con preload_query</h2>

<p>Con <code>preload_query</code> es básicamente igual, pero interceptando el método de
ActiveRecord que se encarga de hacer la consulta, así no llamaremos a la base de
datos hasta el  momento en el que sea necesario.</p>

<p>Ejemplo de uso básico:</p>

<pre><code class="ruby">class Category &lt; ActiveRecord::Base

  has_many :products

  class &lt;&lt; self
    def sum_stock(ids)
      where(id: ids).group("categories.id").joins(:products).select("categories.id, sum(products.stock) AS sum_stock")
    end
  end
end

Category.preload_query(:sum_stock).map(&amp;:sum_stock)
</code></pre>

<p>A la clase <code>Category</code> puede que nos interese implementarle el método <code>sum_stock</code>
para cuando no se hace un preload.</p>

<p>Por ejemplo:</p>

<pre><code class="ruby">class Category &lt; ActiveRecord::Base

  has_many :products

  class &lt;&lt; self
    def preloaded_sum_stock(ids)
      where(id: ids).group("categories.id").joins(:products).select("categories.id, sum(products.stock) AS preloaded_sum_stock")
    end
  end

  def sum_stock
    try(:preloaded_sum_stock) || products.sum(:stock)
  end
end

Category.preload_query(:sum_stock).map(&amp;:sum_stock)
Category.map(&amp;:sum_stock)
Category.last.sum_stock
</code></pre>

<p>Me gustaría pensar un DSL para implementar este último ejemplo de forma mas
sencilla, pero de momento no se me ocurre :P</p>

<h2>Gemas similares</h2>

<p>Estas gemas hace algo parecido, pero solo se encargan de los <code>counts</code>, quizás
para ti sea suficiente.</p>

<ul>
<li><a href="https://github.com/k0kubun/activerecord-precount">https://github.com/k0kubun/activerecord-precount</a></li>
<li><a href="https://github.com/smathieu/preload_counts">https://github.com/smathieu/preload_counts</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord, find_each y uncached]]></title>
    <link href="http://ceritium.github.io/blog/2016/05/22/activerecord-y-memoria/"/>
    <updated>2016-05-22T18:24:56+02:00</updated>
    <id>http://ceritium.github.io/blog/2016/05/22/activerecord-y-memoria</id>
    <content type="html"><![CDATA[<p>Si tenemos que recorrer coleciones muy grandes de ActiveRecord deberíamos usar
<code>find_each</code> o <code>find_in_batches</code>, hasta aquí ninguna novedad, pero el otro día me
di cuenta de que mis workers de sidekiq consumían muchísima memoria, el problema
es que AR cache los objetos que devuelve el <code>find_each</code>.</p>

<p>La solución para evitar esto pasa por usar el método <a href="http://api.rubyonrails.org/classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached">uncached</a>.</p>

<p>Ejemplo:</p>

<pre><code class="ruby">ActiveRecord::Base.uncached do
  scope.find_each(batch_size: 1000) do |tweet|
    gz.write tweet.to_csv
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swagger Docs, Swagger UI y tests de integración]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/29/swagger-docs-swagger-ui-y-tests-de-integracion/"/>
    <updated>2015-03-29T20:52:36+02:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/29/swagger-docs-swagger-ui-y-tests-de-integracion</id>
    <content type="html"><![CDATA[<p>En <a href="https://apidemic.co">Apidemic</a> estoy usando <a href="https://github.com/richhollis/swagger-docs">Swagger Docs</a> para generar la documentación swagger de la <em>API</em> interna y Swagger UI para visualizarla.</p>

<p>La vista por defecto de Swagger UI la he personalizado un poco para añadirle un
campo para la <em>API key</em>, pero si estás logado esta no es necesaria.</p>

<p>Todas estas características quería cubrirlas con <em>tests</em> de integración, pero
tenía el problema de que los <em>swagger docs</em> se generan con una tarea <em>rake</em> y alguno parámetros como el <code>base_path</code> cambiaban en cada entorno. Además en los tests de integración el puerto cambia cada vez.</p>

<p>Así prepare los tests:</p>

<pre><code class="ruby config/initializers/swagger_docs.rb">class Swagger::Docs::Config
  def self.transform_path(path, api_version)
    "#{Rails.application.config.host}/docs/#{path}"
  end
end

Swagger::Docs::Config.register_apis({
  "1.0" =&gt; {
    :api_extension_type =&gt; :json,
    :base_path =&gt; Rails.application.config.host,
# continue...
</code></pre>

<pre><code class="ruby">test 'foo' do
  visit(root_path)
  uri = URI(current_url)
  base_path = "http://#{uri.host}:#{uri.port}"

  Rails.application.config.stubs(:host).returns(base_path)
  Swagger::Docs::Config.registered_apis["1.0"][:base_path] = base_path
  Rake::Task["swagger:docs"].invoke
  # continue...
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ofuscar bases de datos]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/28/ofuscar-bases-de-datos/"/>
    <updated>2015-03-28T01:35:26+01:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/28/ofuscar-bases-de-datos</id>
    <content type="html"><![CDATA[<p>Cuando trabajas con aplicaciones un poco complejas a nivel de modelo de datos o
cuando necesitas una replica de la base de datos de producción para poder hacer
<em>debuggin</em> cómodamente en el entorno de desarrollo muchas veces lo mas eficiente es tener una COPIA de la base de datos, eso si ofuscada.</p>

<p>Para ello estuvimos probando durante un tiempo con un sencillo sistema basado en
expresiones regulares, pero finalmente nos hemos decantado por
<a href="https://github.com/mavenlink/my_obfuscate">my_obfuscate</a>.</p>

<p>Entre esto y builds parametrizados de Jenkins podemos descargarnos toda la base
de datos, solo ciertas tablas o datos específicos de alguna relación pero por
supuesto ofuscada.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fast_bundler]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/28/fast-bundler/"/>
    <updated>2015-03-28T01:08:08+01:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/28/fast-bundler</id>
    <content type="html"><![CDATA[<p>Estoy trabajando en un proyecto muy grande y muy antiguo. Una de las
consecuencias es que tenemos más de 100 gemas en nuestro Gemfile.</p>

<p>Si tienes 100 gemas o menos <strong>Bundler</strong> consulta la API de Rubygems para
calcular las dependencias pero si tienes más se descarga todo el indice, el cual
es bastante pesado y dependiendo de tu conexión a Internet puede ser muy lento.</p>

<p>Para el día a día quizás no sea un gran beneficio, pero cuando estás
actualizando las versión de Rails de un proyecto antiguo se agradece mucho.</p>

<p>Comentándolo con compañeros de trabajo pensamos que sería buena idea probar si
nos podíamos saltar ese límite y acabamos haciendo
<a href="https://github.com/ceritium/fast_bundler">fast_bundler</a>.</p>

<p><strong>fast_bundler</strong> actua como un proxy que envía todos los comandos a <strong>bundler</strong>
pero redefine las constante <code>API_REQUEST_LIMIT</code>.</p>

<p>La gema es totalmente experimental y no se que efectos puede tener en Rubygems
pero hasta ahora no sabemos que haya problemas, de cualquier modo el limite lo
podrían poner a nivel de API si lo considerasen oportuno.</p>

<p>Aunque yo empecé la gema casi todo el trabajo lo ha hecho <a href="https://github.com/mikz">Michal Cichra</a>.</p>

<p>Para usarlo tan sencillo como <strong>bundler</strong>.</p>

<pre><code>$ gem install fast_bundler

$ fast_bundle
$ fast_bundle outdate
$ fast_bundle update rails
</code></pre>
]]></content>
  </entry>
  
</feed>
