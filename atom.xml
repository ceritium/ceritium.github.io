<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[José Galisteo Ruiz]]></title>
  <link href="http://ceritium.github.io/atom.xml" rel="self"/>
  <link href="http://ceritium.github.io/"/>
  <updated>2015-08-06T00:15:28+02:00</updated>
  <id>http://ceritium.github.io/</id>
  <author>
    <name><![CDATA[Jose Galisteo Ruiz]]></name>
    <email><![CDATA[ceritium@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arduino, Wifi, esp2866 y nodemcu]]></title>
    <link href="http://ceritium.github.io/blog/2015/08/06/arduino-wifi-esp2866-y-nodemcu/"/>
    <updated>2015-08-06T00:14:57+02:00</updated>
    <id>http://ceritium.github.io/blog/2015/08/06/arduino-wifi-esp2866-y-nodemcu</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres after upgrade to Yosemite]]></title>
    <link href="http://ceritium.github.io/blog/2015/08/06/postgres-after-upgrade-to-yosemite/"/>
    <updated>2015-08-06T00:03:19+02:00</updated>
    <id>http://ceritium.github.io/blog/2015/08/06/postgres-after-upgrade-to-yosemite</id>
    <content type="html"><![CDATA[<p>I recently upgraded to Yosemite after skip the reminder each day for the last
year&hellip;</p>

<p>Everything was fine, Mysql working, brew packages are OK, rbenv, ruby and Rails
stuff looks fine except <strong>Postgres</strong>.</p>

<p>Checking the logs I saw:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FATAL:  could not open directory "pg_tblspc": No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>The solution was easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/local/var/postgres
</span><span class='line'>mkdir pg_tblspc pg_twophase pg_stat_tmp
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalar QT4 en Ubuntu 14.04]]></title>
    <link href="http://ceritium.github.io/blog/2015/05/29/instalar-qt4-en-ubuntu-14-dot-04/"/>
    <updated>2015-05-29T22:40:16+02:00</updated>
    <id>http://ceritium.github.io/blog/2015/05/29/instalar-qt4-en-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>Ubuntu 14.04 viene con QT5 por defecto lo cual está bien, pero a veces podemos
necesitar usar QT4 para trabajar con versiones de librerías o gemas
antiguas, como por ejemplo <code>capybara-webkit 0.12.1</code>. En algún momento habrá que
actualizarlo&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y build-essential
</span><span class='line'>$ sudo apt-get build-dep qt4-qmake
</span><span class='line'>
</span><span class='line'>$ wget http://download.qt.io/archive/qt/4.8/4.8.6/qt-everywhere-opensource-src-4.8.6.tar.gz
</span><span class='line'>$ tar -xzvf qt-everywhere-opensource-src-4.8.6.tar.gz
</span><span class='line'>$ cd qt-everywhere-opensource-src-4.8.6
</span><span class='line'>
</span><span class='line'># En el configure nos pedirá elegir entre la version open source o privada,
</span><span class='line'># yo elegí la open source.
</span><span class='line'>$ ./configure
</span><span class='line'>
</span><span class='line'># Esto llevará un buen rato
</span><span class='line'>$ make
</span><span class='line'>
</span><span class='line'>$ sudo make install</span></code></pre></td></tr></table></div></figure>


<p>Con esto ya tenemos QT4, pero al hacer por ejemplo <code>gem install capybara-webkit
-v 0.12.1</code> dirá que no encuentra <code>qmake</code> para QT4.</p>

<p>Yo lo que hice fue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Guardo una copia de qmake
</span><span class='line'>
</span><span class='line'>$ sudo mv /usr/bin/qmake /usr/bin/qmake.old
</span><span class='line'>$ sudo /usr/local/Trolltech/Qt-4.8.6 /usr/bin/qmake</span></code></pre></td></tr></table></div></figure>


<p>Y con esto ya instala sin problemas.</p>

<p>Tengo pendiente para el lunes probar <code>qtchooser</code>, el cual parece mejor opción.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino modulo RF 433Mhz]]></title>
    <link href="http://ceritium.github.io/blog/2015/05/28/arduino-modulo-rf-433mhz/"/>
    <updated>2015-05-28T01:28:42+02:00</updated>
    <id>http://ceritium.github.io/blog/2015/05/28/arduino-modulo-rf-433mhz</id>
    <content type="html"><![CDATA[<p>Para el proyecto de <a href="http://ceritium.github.io/2015/04/27/monitorizar-huerto-urbano-con-arduino/">monitorización de mi pequeño huerto
urbano</a> necesito
comunicar dos módulos Arduino de forma inalámbrica, para eso tenemos distintas
opciones y dependiendo de las necesidades podremos usar un sistema u otro.</p>

<p>En mi caso, solo necesito enviar unos pocos datos a pocos metros, lo que viene
siendo desde mi balcón donde tengo un módulo hasta el router donde tengo el otro
conectado a Internet.</p>

<p>Para ello he usado un transmisor y un receptor de <strong>RF a 433Mhz</strong>. Lo más
interesante de estos módulos es su bajo coste y lo podemos encontrar fácilmente
en <a href="http://www.amazon.es/gp/product/B00Q6WKUOM/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00Q6WKUOM&linkCode=as2&tag=josegr-21">Amazon</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=josegr-21&l=as2&o=30&a=B00Q6WKUOM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
 o <a href="http://www.dx.com/es/p/433mhz-rf-transmitter-receiver-link-kit-green-221225?Utm_rid=98434108&amp;Utm_source=affiliate#.VUFV2Nqqqko">DX.com</a> por menos de 5 euros.</p>

<p>Para usar estos módulos podemos usar la librería
<a href="https://github.com/kevinprince/VirtualWire">VirtualWire</a> la cual nos hará el
proceso mucho más sencillo.</p>

<p>Modulo emisor:</p>

<p><img src="http://ceritium.github.io/images/rf-433-emiter.jpg" title="RF 433 emiter" ></p>

<p>Conexiones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Arduino     | Emisor
</span><span class='line'>----------- | ---------------
</span><span class='line'>5V          | VCC
</span><span class='line'>GND         | GND
</span><span class='line'>Digital 12  | DATA
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;VirtualWire.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Para el led</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Pin de escritura</span>
</span><span class='line'>  <span class="n">vw_set_tx_pin</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Velocidad de transferencia en Kbps</span>
</span><span class='line'>  <span class="c1">// debe ser la misma en el receptor</span>
</span><span class='line'>  <span class="n">vw_setup</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Un mensaje cualquiera, podríamos preparar una cadena</span>
</span><span class='line'>  <span class="c1">// concatenando distintos valores de sensores.</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">message</span> <span class="o">=</span>  <span class="s">&quot;hello world!&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Convertimos el string a un array char.</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">message</span><span class="p">.</span><span class="n">length</span><span class="p">()];</span>
</span><span class='line'>  <span class="n">message</span><span class="p">.</span><span class="n">toCharArray</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Iluminamos el led para indicar que estamos transmitiendo</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Enviamos el mensaje</span>
</span><span class='line'>  <span class="n">vw_send</span><span class="p">((</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Se mantiene en espera hasta que todo el mensaje se ha enviado</span>
</span><span class='line'>  <span class="n">vw_wait_tx</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Apagamos el led</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Simplemente esperamos un segundo</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Modulo receptor:</p>

<p><img src="http://ceritium.github.io/images/rf-433-receiver.jpg" title="RF 433 receiver" ></p>

<p>Conexiones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Arduino     | Receptor
</span><span class='line'>----------- | -----------------------------------------
</span><span class='line'>5V          | VCC
</span><span class='line'>GND         | GND
</span><span class='line'>Digital 11  | DATA # Uno de los dos disponibles
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;VirtualWire.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Para el led</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Pin de lectura</span>
</span><span class='line'>  <span class="n">vw_set_rx_pin</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Velocidad de transferencia en Kbps</span>
</span><span class='line'>  <span class="c1">// debe ser la misma en el transmisor</span>
</span><span class='line'>  <span class="n">vw_setup</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Ponemos en escucha</span>
</span><span class='line'>  <span class="n">vw_rx_start</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Inizializamos el buffer con las constantes definidas en VirtualWire</span>
</span><span class='line'>  <span class="kt">uint8_t</span> <span class="n">buf</span><span class="p">[</span><span class="n">VW_MAX_MESSAGE_LEN</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">uint8_t</span> <span class="n">buflen</span> <span class="o">=</span> <span class="n">VW_MAX_MESSAGE_LEN</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">vw_get_message</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buflen</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Iluminamos el led para indicar que hay una transmisión entrante</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Leemos el buffer y lo volcamos en la variable data</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">buflen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">+=</span> <span class="n">String</span><span class="p">(</span><span class="kt">char</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Lo imprimimos por el puerto serie</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Y apagamos el led</span>
</span><span class='line'>   <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Con todo enchufado y el código cargado en ambos módulos podremos ver los leds
parpadeando y por el puerto serie del receptor los mensajes que manda el emisor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitorizar huerto urbano con Arduino]]></title>
    <link href="http://ceritium.github.io/blog/2015/04/27/monitorizar-huerto-urbano-con-arduino/"/>
    <updated>2015-04-27T21:00:42+02:00</updated>
    <id>http://ceritium.github.io/blog/2015/04/27/monitorizar-huerto-urbano-con-arduino</id>
    <content type="html"><![CDATA[<p>A pesar de lo pequeñito de mi balcón desde hace unos meses me decidí a sembrar
algunas hortalizas y hierbas aromáticas en mi balcón. También desde hace unos
meses estoy trasteando mas que nunca con Arduino y como no podía ser de otra
manera me propuse monitorizar mi mini huerto con Arduino.</p>

<p>El proyecto se compone de dos partes:</p>

<ul>
<li><p>Modulo auto suficiente de medición encargado de tomar los datos del huerto y
que los envié al modulo receptor.</p></li>
<li><p>Modulo receptor de datos que se encarga de almacenar los datos y tratarlos.</p></li>
</ul>


<p>Objetivos:</p>

<p>El modulo de medición debería ser energeticamente autosuficiente, es decir,
alimentarse por energía solar y ser capaz de enviar datos al modulo receptor.</p>

<p>El modulo receptor estaría a cierta distancia y conectado a una fuente
eléctrica.</p>

<h2>Modulo de medición</h2>

<p>La idea es que cada modulo pueda medir al menos la humedad de varias zonas,
plantas, macetas&hellip; para transmitir los datos al receptor.</p>

<h3>Componentes</h3>

<ul>
<li>Arduino Nano</li>
<li>Placa <a href="http://www.seeedstudio.com/depot/LiPo-Rider-v13-p-2403.html">LipoRider</a></li>
<li>Panel solar de <a href="http://www.seeedstudio.com/depot/05W-Solar-Panel-55x70-p-632.html">0.5W</a></li>
<li><a href="http://www.amazon.es/gp/product/B00Q6WKUOM/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00Q6WKUOM&linkCode=as2&tag=josegr-21">Transmisor RF 433Mhz</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=josegr-21&l=as2&o=30&a=B00Q6WKUOM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.es/gp/product/B00K67Z76O/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00K67Z76O&linkCode=as2&tag=josegr-21">Higrometro</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=josegr-21&l=as2&o=30&a=B00K67Z76O" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>


<h2>Modulo receptor</h2>

<p>Recibe las lecturas de cada transmisor y los envía por HTTP a algún servicio web
o almacena en la SD.</p>

<h3>Componentes</h3>

<p>Básico:</p>

<ul>
<li>Arduino Uno</li>
<li><a href="http://www.amazon.es/gp/product/B00Q6WKUOM/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00Q6WKUOM&linkCode=as2&tag=josegr-21">Transmisor RF 433Mhz</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=josegr-21&l=as2&o=30&a=B00Q6WKUOM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>


<p>Opción A:</p>

<ul>
<li><a href="http://www.amazon.es/gp/product/B00CL59OJU/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00CL59OJU&linkCode=as2&tag=josegr-21">Placa Arduino con Ethernet Shield W5100</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=josegr-21&l=as2&o=30&a=B00CL59OJU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>


<p>Opción B:</p>

<ul>
<li><a href="http://www.amazon.es/gp/product/B00CWX6UXY/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00CWX6UXY&linkCode=as2&tag=josegr-21">Reloj, modulo I2C DS1307</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=josegr-21&l=as2&o=30&a=B00CWX6UXY" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.dx.com/es/p/spi-microsd-card-adapter-v0-9b-for-arduino-works-with-official-arduino-board-246784?Utm_rid=98434108&amp;Utm_source=affiliate#.VUFV2Nqqqko">Adaptador micro SD</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swagger Docs, Swagger UI y tests de integración]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/29/swagger-docs-swagger-ui-y-tests-de-integracion/"/>
    <updated>2015-03-29T20:52:36+02:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/29/swagger-docs-swagger-ui-y-tests-de-integracion</id>
    <content type="html"><![CDATA[<p>En <a href="https://apidemic.co">Apidemic</a> estoy usando <a href="https://github.com/richhollis/swagger-docs">Swagger Docs</a> para generar la documentación swagger de la <em>API</em> interna y Swagger UI para visualizarla.</p>

<p>La vista por defecto de Swagger UI la he personalizado un poco para añadirle un
campo para la <em>API key</em>, pero si estás logado esta no es necesaria.</p>

<p>Todas estas características quería cubrirlas con <em>tests</em> de integración, pero
tenía el problema de que los <em>swagger docs</em> se generan con una tarea <em>rake</em> y alguno parámetros como el <code>base_path</code> cambiaban en cada entorno. Además en los tests de integración el puerto cambia cada vez.</p>

<p>Así prepare los tests:</p>

<figure class='code'><figcaption><span>config/initializers/swagger_docs.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Swagger</span><span class="o">::</span><span class="no">Docs</span><span class="o">::</span><span class="no">Config</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">transform_path</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">api_version</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">host</span><span class="si">}</span><span class="s2">/docs/</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Swagger</span><span class="o">::</span><span class="no">Docs</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">register_apis</span><span class="p">({</span>
</span><span class='line'>  <span class="s2">&quot;1.0&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:api_extension_type</span> <span class="o">=&gt;</span> <span class="ss">:json</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:base_path</span> <span class="o">=&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">host</span><span class="p">,</span>
</span><span class='line'><span class="c1"># continue...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">test</span> <span class="s1">&#39;foo&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="n">current_url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">base_path</span> <span class="o">=</span> <span class="s2">&quot;http://</span><span class="si">#{</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">stubs</span><span class="p">(</span><span class="ss">:host</span><span class="p">)</span><span class="o">.</span><span class="n">returns</span><span class="p">(</span><span class="n">base_path</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Swagger</span><span class="o">::</span><span class="no">Docs</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">registered_apis</span><span class="o">[</span><span class="s2">&quot;1.0&quot;</span><span class="o">][</span><span class="ss">:base_path</span><span class="o">]</span> <span class="o">=</span> <span class="n">base_path</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;swagger:docs&quot;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>  <span class="c1"># continue...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutum]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/28/tutum/"/>
    <updated>2015-03-28T01:48:42+01:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/28/tutum</id>
    <content type="html"><![CDATA[<p>El otro día casi por casualidad llegué a la web de
<a href="https://www.tutum.co/">Tutum.co</a>.</p>

<p>Tutum se define como &ldquo;Docker Platform for Devs and Ops&rdquo;, yo lo veo como un
<strong>Marathon</strong> pero mucho más sencillo y sin necesidad de tener más infraestructura
que los servidores sobre los que quieres correr tus <em>dockers</em>.</p>

<p>A golpe de click puedes lanzar nodos sobre Amazon Ec2, Digital Ocean, Azure o
Softlayer, eliges la región, el tamaño, el numero de maquinas y las <em>taggeas</em>
para poder decirle a los servicios que levantes que vayan a un servidor o a
otro.</p>

<p>Lo mejor de todo es la API, gracias a la cual se me ha ocurrido montar un pequeño
sistema de integración continua <em>as a service</em>, ya se que hay muchos, pero es un
reto interesante.</p>

<p>Mientras sigan en beta será totalmente gratuito y los que se registren mientras
tanto tendrán una cuenta gratuita para siempre.</p>

<p>Si no sabes que es Docker o Marathon puedes seguir estos enlaces:</p>

<ul>
<li><a href="https://mesosphere.github.io/marathon/">Marathon</a></li>
<li><a href="https://www.docker.com/">Docker</a></li>
</ul>


<p>De todas formas dentro de Tutum puedes encontrar <a href="https://support.tutum.co/support/solutions/5000042949">mucha</a> <a href="https://learn.tutum.co/">documentación</a> sobre Tutum o sobre Docker en general. Mi recomendación además de que pruebes Docker es que trates de seguir algún tutorial sencillo del servicio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ofuscar bases de datos]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/28/ofuscar-bases-de-datos/"/>
    <updated>2015-03-28T01:35:26+01:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/28/ofuscar-bases-de-datos</id>
    <content type="html"><![CDATA[<p>Cuando trabajas con aplicaciones un poco complejas a nivel de modelo de datos o
cuando necesitas una replica de la base de datos de producción para poder hacer
<em>debuggin</em> cómodamente en el entorno de desarrollo muchas veces lo mas eficiente es tener una COPIA de la base de datos, eso si ofuscada.</p>

<p>Para ello estuvimos probando durante un tiempo con un sencillo sistema basado en
expresiones regulares, pero finalmente nos hemos decantado por
<a href="https://github.com/mavenlink/my_obfuscate">my_obfuscate</a>.</p>

<p>Entre esto y builds parametrizados de Jenkins podemos descargarnos toda la base
de datos, solo ciertas tablas o datos específicos de alguna relación pero por
supuesto ofuscada.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fast_bundler]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/28/fast-bundler/"/>
    <updated>2015-03-28T01:08:08+01:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/28/fast-bundler</id>
    <content type="html"><![CDATA[<p>Estoy trabajando en un proyecto muy grande y muy antiguo. Una de las
consecuencias es que tenemos más de 100 gemas en nuestro Gemfile.</p>

<p>Si tienes 100 gemas o menos <strong>Bundler</strong> consulta la API de Rubygems para
calcular las dependencias pero si tienes más se descarga todo el indice, el cual
es bastante pesado y dependiendo de tu conexión a Internet puede ser muy lento.</p>

<p>Para el día a día quizás no sea un gran beneficio, pero cuando estás
actualizando las versión de Rails de un proyecto antiguo se agradece mucho.</p>

<p>Comentándolo con compañeros de trabajo pensamos que sería buena idea probar si
nos podíamos saltar ese límite y acabamos haciendo
<a href="https://github.com/ceritium/fast_bundler">fast_bundler</a>.</p>

<p><strong>fast_bundler</strong> actua como un proxy que envía todos los comandos a <strong>bundler</strong>
pero redefine las constante <code>API_REQUEST_LIMIT</code>.</p>

<p>La gema es totalmente experimental y no se que efectos puede tener en Rubygems
pero hasta ahora no sabemos que haya problemas, de cualquier modo el limite lo
podrían poner a nivel de API si lo considerasen oportuno.</p>

<p>Aunque yo empecé la gema casi todo el trabajo lo ha hecho <a href="https://github.com/mikz">Michal Cichra</a>.</p>

<p>Para usarlo tan sencillo como <strong>bundler</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install fast_bundler
</span><span class='line'>
</span><span class='line'>$ fast_bundle
</span><span class='line'>$ fast_bundle outdate
</span><span class='line'>$ fast_bundle update rails</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apidemic]]></title>
    <link href="http://ceritium.github.io/blog/2015/03/28/apidemic/"/>
    <updated>2015-03-28T00:31:14+01:00</updated>
    <id>http://ceritium.github.io/blog/2015/03/28/apidemic</id>
    <content type="html"><![CDATA[<p>Durante las ultimas semanas he estado trabajando en <a href="http://apidemic.co">Apidemic</a>.</p>

<p><img src="http://ceritium.github.io/images/apidemic-entities.png" title="Apidemic screenshot" >
<img src="http://ceritium.github.io/images/apidemic-entity-edit.png" title="Apidemic screenshot" ></p>

<p>Apidemic permite crear APIs de datos a golpe de click. Defines las entidades con
los campos y los tipos de datos y lista para usar.</p>

<p>De momento el registro está totalmente abierto y gratuito, todas las cuentas que
se creen tendrán un plan básico gratuito para siempre.</p>

<p>Características:</p>

<ul>
<li>Documentación swagger automática.</li>
<li>API Rest en formato JSON.</li>
<li>El listado permite paginación, filtro por cada campo y ordenación.</li>
<li>Métodos para incrementar de forma atómica los campos numéricos.</li>
<li>Gestión de keys en modo escritura o lectura.</li>
<li>API interna.</li>
</ul>


<p><img src="http://ceritium.github.io/images/apidemic-swagger.png" title="Apidemic screenshot swagger" ></p>
]]></content>
  </entry>
  
</feed>
